name: Flutter CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  FLUTTER_VERSION: "3.19.5"
  PROJECT_DIR: "flutter_printer_qpos"
  GRADLE_BUILD_CACHE_DIR: "$HOME/.gradle/caches"
  GRADLE_WRAPPER_CACHE_DIR: "$HOME/.gradle/wrapper"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify project directory
        run: |
          if [ ! -d "${{ env.PROJECT_DIR }}" ]; then
            echo "::error::Project directory '${{ env.PROJECT_DIR }}' not found!"
            ls -la
            exit 1
          fi

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Verify Flutter
        run: |
          flutter --version
          flutter doctor -v

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            /opt/hostedtoolcache/flutter
            ~/.pub-cache
            ${{ env.PROJECT_DIR }}/.dart_tool
          key: ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-${{ hashFiles('${{ env.PROJECT_DIR }}/pubspec.lock') }}

      - name: Get dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: flutter pub get

      - name: Run tests
        working-directory: ${{ env.PROJECT_DIR }}
        run: flutter test

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            /opt/hostedtoolcache/flutter
            ~/.pub-cache
            ${{ env.PROJECT_DIR }}/.dart_tool
          key: ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-${{ hashFiles('${{ env.PROJECT_DIR }}/pubspec.lock') }}

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.GRADLE_BUILD_CACHE_DIR }}
            ${{ env.GRADLE_WRAPPER_CACHE_DIR }}
          key: ${{ runner.os }}-gradle-${{ hashFiles('${{ env.PROJECT_DIR }}/android/gradle/wrapper/gradle-wrapper.properties') }}

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Get dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: flutter pub get

      - name: Find entry point
        id: find-entry
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if [ -f "lib/main.dart" ]; then
            echo "ENTRY_POINT=lib/main.dart" >> $GITHUB_OUTPUT
          elif [ -f "lib/main_prod.dart" ]; then
            echo "ENTRY_POINT=lib/main_prod.dart" >> $GITHUB_OUTPUT
          else
            ENTRY=$(find lib -name "*.dart" | head -1)
            if [ -z "$ENTRY" ]; then
              echo "::error::No Dart files found in lib directory!"
              exit 1
            else
              echo "ENTRY_POINT=$ENTRY" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Build APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter clean
          flutter build apk --release --no-tree-shake-icons -t ${{ steps.find-entry.outputs.ENTRY_POINT }}
          echo "APK built at: $(pwd)/build/app/outputs/flutter-apk/app-release.apk"

      - name: Extract version info
        id: version
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '\"')
          APP_NAME=$(grep 'name:' pubspec.yaml | awk '{print $2}' | tr -d '\"')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT
          echo "APK_PATH=$(pwd)/build/app/outputs/flutter-apk/app-release.apk" >> $GITHUB_OUTPUT

      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-release
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
          retention-days: 5

  release:
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download APK artifact
        uses: actions/download-artifact@v3
        with:
          name: app-release

      - name: Get version info
        id: version
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '\"')" >> $GITHUB_OUTPUT
          echo "APP_NAME=$(grep 'name:' pubspec.yaml | awk '{print $2}' | tr -d '\"')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          release_name: ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          body: |
            Automated release for ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
            - Built from ${{ github.ref }}
            - Commit: ${{ github.sha }}

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app-release.apk
          asset_name: ${{ steps.version.outputs.APP_NAME }}-${{ steps.version.outputs.VERSION }}.apk
          asset_content_type: application/vnd.android.package-archive
