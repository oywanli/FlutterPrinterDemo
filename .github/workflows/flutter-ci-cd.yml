name: Flutter CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

env:
  FLUTTER_VERSION: "3.19.5"
  PROJECT_DIR: "flutter_printer_qpos"  # 明确指定项目子目录

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 验证项目结构
      - name: Verify project structure
        run: |
          echo "Current directory: $(pwd)"
          echo "=== Root directory contents ==="
          ls -la
          
          echo "=== Project directory (${{ env.PROJECT_DIR }}) contents ==="
          ls -la "${{ env.PROJECT_DIR }}"
          
          if [ ! -f "${{ env.PROJECT_DIR }}/pubspec.yaml" ]; then
            echo "::error::pubspec.yaml not found in ${{ env.PROJECT_DIR }} directory!"
            echo "Available files in ${{ env.PROJECT_DIR }}:"
            ls -la "${{ env.PROJECT_DIR }}"
            exit 1
          fi

      # 3. 设置Flutter环境
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      # 4. 获取依赖
      - name: Get dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: flutter pub get

      # 5. 设置Java环境
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # 6. 构建APK
      - name: Build APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter clean
          flutter build apk --release --no-tree-shake-icons

      # 7. 获取版本信息
      - name: Extract version info
        id: version
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '\"')" >> $GITHUB_OUTPUT
          echo "APP_NAME=$(grep 'name:' pubspec.yaml | awk '{print $2}' | tr -d '\"')" >> $GITHUB_OUTPUT

      # 8. 上传APK
      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-release
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
