name: Flutter CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  FLUTTER_VERSION: "3.19.5"
  PROJECT_DIR: "."  # 使用当前目录，不再嵌套

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 验证项目结构
      - name: Verify project structure
        run: |
          echo "Current directory: $(pwd)"
          ls -la
          if [ ! -f "pubspec.yaml" ]; then
            echo "::error::pubspec.yaml not found in root directory!"
            exit 1
          fi
          if [ ! -f "lib/main.dart" ]; then
            echo "::warning::lib/main.dart not found, checking alternative entry points"
            # 查找其他可能的入口文件
            find lib -name "*.dart" | head -5
          fi

      # 3. 设置Flutter环境
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      # 4. 验证环境
      - name: Verify Flutter
        run: |
          flutter --version
          flutter doctor -v

      # 5. 缓存优化
      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            /opt/hostedtoolcache/flutter
            ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-${{ hashFiles('pubspec.lock') }}

      # 6. 获取依赖
      - name: Get dependencies
        run: flutter pub get

      # 7. 设置Java环境
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # 8. 构建APK（使用明确的入口点）
      - name: Build APK
        run: |
          # 查找入口文件
          if [ -f "lib/main.dart" ]; then
            ENTRY_POINT="lib/main.dart"
          elif [ -f "lib/main_prod.dart" ]; then
            ENTRY_POINT="lib/main_prod.dart"
          else
            ENTRY_POINT=$(find lib -name "*.dart" | head -1)
            if [ -z "$ENTRY_POINT" ]; then
              echo "::error::No Dart entry point found in lib directory!"
              exit 1
            fi
          fi
          
          echo "Using entry point: $ENTRY_POINT"
          flutter clean
          flutter build apk --release --no-tree-shake-icons -t $ENTRY_POINT

      # 9. 获取版本信息
      - name: Extract version info
        id: version
        run: |
          echo "VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '\"')" >> $GITHUB_OUTPUT
          echo "APP_NAME=$(grep 'name:' pubspec.yaml | awk '{print $2}' | tr -d '\"')" >> $GITHUB_OUTPUT

      # 10. 创建Release
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          release_name: ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false

      # 11. 上传APK
      - name: Upload APK to Release
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-release.apk
          asset_name: ${{ steps.version.outputs.APP_NAME }}-${{ steps.version.outputs.VERSION }}.apk
          asset_content_type: application/vnd.android.package-archive
