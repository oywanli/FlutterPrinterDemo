name: Flutter CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  FLUTTER_VERSION: "3.19.5"
  PROJECT_DIR: "flutter_printer_qpos"
  ORG_NAME: "com.dspread"
  KEYSTORE_FILE: "android/app.keystore"  # Path to your keystore file

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code with full history
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Get commit details
      - name: Get commit details
        id: commit
        run: |
          echo "commit_hash=$(git log -1 --pretty=%H)" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=%s)" >> $GITHUB_OUTPUT
          echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
          echo "commit_date=$(git log -1 --pretty=%cd --date=format:'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          echo "commit_url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$GITHUB_SHA" >> $GITHUB_OUTPUT

      # 3. Verify project directory
      - name: Verify project directory
        run: |
          if [ ! -d "${{ env.PROJECT_DIR }}" ]; then
            echo "::error::Project directory '${{ env.PROJECT_DIR }}' not found!"
            ls -la
            exit 1
          fi

      # 4. Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      # 5. Verify environment
      - name: Verify Flutter
        run: |
          flutter --version
          flutter doctor

      # 6. Prepare project structure
      - name: Fix and Prepare Project
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # Simplified project preparation
          ENTRY_POINT=$(find . -iname "main.dart" | head -1)
          if [ -z "$ENTRY_POINT" ]; then
            echo "::error::No Dart entry file found!"
            exit 1
          fi
          echo "ENTRY_POINT=$ENTRY_POINT" >> $GITHUB_ENV
          flutter clean
          flutter pub get

      # 7. Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # 8. Configure signing (using app.keystore)
      - name: Configure Android signing
        working-directory: ${{ env.PROJECT_DIR }}/android
        run: |
          # Verify keystore file exists
          if [ ! -f "${{ env.KEYSTORE_FILE }}" ]; then
            echo "::error::Keystore file not found at ${{ env.KEYSTORE_FILE }}"
            exit 1
          fi

          # Create key.properties file
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> key.properties
          echo "storeFile=${{ env.KEYSTORE_FILE }}" >> key.properties

          # Verify key.properties
          cat key.properties

      # 9. Build signed APK
      - name: Build signed APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter clean
          flutter build apk --release \
            --no-tree-shake-icons \
            -t $ENTRY_POINT \
            --build-number=$(date +%Y%m%d%H%M) \
            --build-name=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '\"')

      # 10. Extract version info
      - name: Extract version info
        id: version
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '\"')
          APP_NAME=$(grep 'name:' pubspec.yaml | awk '{print $2}' | tr -d '\"')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT
          echo "APK_PATH=build/app/outputs/flutter-apk/app-release.apk" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      # 11. Create release with APK
      - name: Create Release
        id: create_release
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          name: ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
          body: |
            ## ðŸš€ ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
            
            **Build Information**
            - Version: ${{ steps.version.outputs.VERSION }}
            - Build Date: ${{ steps.version.outputs.BUILD_DATE }}
            
            **Commit Details**
            - Hash: [${{ steps.commit.outputs.commit_hash }}](${{ steps.commit.outputs.commit_url }})
            - Message: ${{ steps.commit.outputs.commit_message }}
            - Author: ${{ steps.commit.outputs.commit_author }}
            - Date: ${{ steps.commit.outputs.commit_date }}
            
            **Download**
            - APK attached below
          draft: false
          prerelease: false
          files: ${{ env.PROJECT_DIR }}/${{ steps.version.outputs.APK_PATH }}
