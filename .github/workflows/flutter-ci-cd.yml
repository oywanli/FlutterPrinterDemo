name: Flutter CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  FLUTTER_VERSION: "3.19.5"
  PROJECT_DIR: "flutter_printer_qpos"
  ORG_NAME: "com.dspread"

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 设置Flutter环境
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      # 3. 验证环境
      - name: Verify Flutter
        run: |
          flutter --version
          flutter doctor

      # 4. 智能处理项目结构
      - name: Prepare Project
        id: prepare
        run: |
          # 检测是否为example项目结构
          if [ -d "${{ env.PROJECT_DIR }}/example" ]; then
            echo "Example project structure detected"
            echo "WORKING_DIR=${{ env.PROJECT_DIR }}/example" >> $GITHUB_ENV
            echo "ENTRY_POINT=lib/main.dart" >> $GITHUB_ENV
          else
            echo "Standard project structure detected"
            echo "WORKING_DIR=${{ env.PROJECT_DIR }}" >> $GITHUB_ENV
            echo "ENTRY_POINT=lib/main.dart" >> $GITHUB_ENV
          fi

          # 验证入口文件存在
          if [ ! -f "$WORKING_DIR/$ENTRY_POINT" ]; then
            echo "::error::Entry point not found at $WORKING_DIR/$ENTRY_POINT"
            exit 1
          fi

      # 5. 修复路径问题
      - name: Fix Path Issues
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          # 修复Pages/pages大小写问题
          if [ -d "pages" ] && [ ! -d "Pages" ]; then
            mv pages Pages
          fi

          # 修复导入语句
          sed -i -E "s|import ['\"](pages/PrintItemsPage\.dart)['\"]|import 'Pages/PrintItemsPage.dart'|g" lib/main.dart

          # 确保PrintItemsPage存在
          if [ ! -f "Pages/PrintItemsPage.dart" ]; then
            echo "::error::PrintItemsPage.dart not found in Pages directory!"
            exit 1
          fi

      # 6. 获取依赖
      - name: Get dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          flutter pub get
          flutter pub upgrade

      # 7. 设置Java环境
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # 8. 构建APK
      - name: Build APK
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          flutter clean
          flutter build apk --release --no-tree-shake-icons

      # 9. 获取版本信息
      - name: Extract version info
        id: version
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '\"')" >> $GITHUB_OUTPUT
          echo "APP_NAME=$(grep 'name:' pubspec.yaml | awk '{print $2}' | tr -d '\"')" >> $GITHUB_OUTPUT

      # 10. 创建Release
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          release_name: ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false

      # 11. 上传APK
      - name: Upload APK to Release
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.WORKING_DIR }}/build/app/outputs/flutter-apk/app-release.apk
          asset_name: ${{ steps.version.outputs.APP_NAME }}-${{ steps.version.outputs.VERSION }}.apk
          asset_content_type: application/vnd.android.package-archive
