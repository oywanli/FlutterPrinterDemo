name: Flutter CI/CD Pipeline
on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  FLUTTER_VERSION: "3.19.5"
  PROJECT_DIR: "flutter_printer_qpos"
  ORG_NAME: "com.dspread"
  KEYSTORE_FILE: "flutter_printer_qpos/example/android/app/app.keystore"

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 设置Android环境
      - uses: android-actions/setup-android@v3
        with:
          android-sdk-platform: 34
          android-sdk-build-tools: 34.0.0

      # 3. 获取提交信息
      - name: Get commit details
        id: commit
        run: |
          echo "commit_hash=$(git log -1 --pretty=%H)" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=%s)" >> $GITHUB_OUTPUT
          echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
          echo "commit_date=$(git log -1 --pretty=%cd --date=format:'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          echo "commit_url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$GITHUB_SHA" >> $GITHUB_OUTPUT

      # 4. 验证项目目录
      - name: Verify project directory
        run: |
          if [ ! -d "${{ env.PROJECT_DIR }}" ]; then
            echo "::error::Project directory '${{ env.PROJECT_DIR }}' not found!"
            ls -la
            exit 1
          fi

      # 5. 设置Flutter环境
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      # 6. 验证环境
      - name: Verify Flutter
        run: |
          flutter --version
          flutter doctor

      # 7. 设置Java环境
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

   
      # 10. 智能修复项目结构
      - name: Fix and Prepare Project
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # 查找入口文件
          ENTRY_POINT=$(find . -iname "main.dart" -o -iname "main_prod.dart" | head -1)
          if [ -z "$ENTRY_POINT" ]; then
            echo "::error::未找到任何Dart入口文件!"
            exit 1
          fi
          echo "找到入口文件: $ENTRY_POINT"
          echo "ENTRY_POINT=$ENTRY_POINT" >> $GITHUB_ENV

          # 备份关键文件
          mkdir -p ../temp_backup
          cp -r lib pubspec.yaml ../temp_backup/
          [ -d "assets" ] && cp -r assets ../temp_backup/
          [ -d "test" ] && cp -r test ../temp_backup/

          # 重建项目结构
          cd ..
          flutter create \
            --platforms android,ios \
            --project-name ${{ env.PROJECT_DIR }} \
            --org ${{ env.ORG_NAME }} \
            --overwrite \
            temp_flutter_project
          
          # 恢复项目
          cp -r temp_flutter_project/. ${{ env.PROJECT_DIR }}/
          rm -rf temp_flutter_project
          
          # 恢复原有代码
          cd ${{ env.PROJECT_DIR }}
          rm -rf lib test
          cp -r ../temp_backup/lib .
          [ -d "../temp_backup/test" ] && cp -r ../temp_backup/test .
          cp ../temp_backup/pubspec.yaml .
          [ -d "../temp_backup/assets" ] && cp -r ../temp_backup/assets .
          
          # 清理备份
          rm -rf ../temp_backup
          echo "项目准备完成!"

      # 11. 获取依赖
      - name: Get dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter pub get

     # 12. 解码并保存 keystore 文件
      - name: Decode and Save Keystore
        run: |
          echo "${{ vars.KEYSTORE_FILE }}" | base64 -d > pos_android_studio_demo/app.keystore

      - name: Build the release signed APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "使用入口点: $ENTRY_POINT"
          flutter clean
          flutter build apk --release --no-tree-shake-icons -t "$ENTRY_POINT"
            -Pandroid.injected.signing.store.file=app.keystore \
            -Pandroid.injected.signing.store.password=${{ vars.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ vars.KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ vars.KEY_PASSWORD }}
      # # 12. 构建APK
      # - name: Build APK
      #   working-directory: ${{ env.PROJECT_DIR }}
      #   run: |
      #     echo "使用入口点: $ENTRY_POINT"
      #     flutter clean
      #     flutter build apk --release --no-tree-shake-icons -t "$ENTRY_POINT"
          
      #     # 验证APK是否已签名
      #     if ! apksigner verify --verbose build/app/outputs/flutter-apk/app-release.apk; then
      #       echo "::error::APK签名验证失败!"
      #       exit 1
      #     fi

      # 13. 提取版本信息
      - name: Extract version info
        id: version
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '\"')
          APP_NAME=$(grep 'name:' pubspec.yaml | awk '{print $2}' | tr -d '\"')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT
          echo "APK_PATH=${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      # 14. 创建发布
      - name: Create Release
        id: create_release
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          name: ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
          body: |
            ## 🚀 ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
            
            **Commit Messgae**
            - commit hash: [${{ steps.commit.outputs.commit_hash }}](${{ steps.commit.outputs.commit_url }})
            - commit message: ${{ steps.commit.outputs.commit_message }}
            - commit author: ${{ steps.commit.outputs.commit_author }}
            - commit date: ${{ steps.commit.outputs.commit_date }}
            
            **APK Version**
            - Version: ${{ steps.version.outputs.VERSION }}
      
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            ${{ steps.version.outputs.APK_PATH }}
