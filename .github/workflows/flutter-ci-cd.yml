name: Optimized Flutter CI/CD Pipeline

on:
  push:
    tags: ['v*']
    branches: [main]

env:
  FLUTTER_VERSION: "3.19.5"

jobs:
  build-release:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          path: 'flutter-app'
          fetch-depth: 0
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Verify Flutter
        run: flutter --version
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            /opt/hostedtoolcache/flutter
            ${{ env.HOME }}/.pub-cache
          key: ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-${{ hashFiles('flutter-app/pubspec.lock') }}
      
      - name: Install dependencies
        working-directory: ./flutter_printer_qpos/example
        run: flutter pub get
      
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Clean build
        working-directory: ./flutter-app
        run: flutter clean
      
      - name: Build APK
        working-directory: ./flutter-app
        run: flutter build apk --release --no-tree-shake-icons
      
      - name: Get version info
        id: version
        working-directory: ./flutter-app
        run: |
          echo "VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '\"')" >> $GITHUB_OUTPUT
          echo "APP_NAME=$(grep 'name:' pubspec.yaml | awk '{print $2}' | tr -d '\"')" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          release_name: ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
          body: |
            Automatic release for version ${{ steps.version.outputs.VERSION }}
            Build date: ${{ steps.date.outputs.date }}
          draft: false
          prerelease: false
      
      - name: Upload APK
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./flutter-app/build/app/outputs/flutter-apk/app-release.apk
          asset_name: ${{ steps.version.outputs.APP_NAME }}-${{ steps.version.outputs.VERSION }}.apk
          asset_content_type: application/vnd.android.package-archive
