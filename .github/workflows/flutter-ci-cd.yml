name: Flutter CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]
env:
  FLUTTER_VERSION: "3.19.5"
  PROJECT_DIR: "flutter_printer_qpos"
  ORG_NAME: "com.dspread"
# 签名配置
  KEYSTORE_BASE64: ${{ vars.KEYSTORE_FILE }}
  KEYSTORE_ALIAS: ${{ vars.KEY_ALIAS }}
  KEYSTORE_PASSWORD: ${{ vars.KEYSTORE_PASSWORD }}
  KEY_PASSWORD: ${{ vars.KEY_PASSWORD }}
  KEYSTORE_PATH: "flutter_printer_qpos/example/android/app/keystores"  # 存储路径
jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码（获取完整提交历史）
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整提交历史，以便获取提交信息

      # 2. 获取提交信息
      - name: Get commit details
        id: commit
        run: |
          echo "commit_hash=$(git log -1 --pretty=%H)" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=%s)" >> $GITHUB_OUTPUT
          echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
          echo "commit_date=$(git log -1 --pretty=%cd --date=format:'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          echo "commit_url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$GITHUB_SHA" >> $GITHUB_OUTPUT

      # 3. 验证项目目录
      - name: Verify project directory
        run: |
          if [ ! -d "${{ env.PROJECT_DIR }}" ]; then
            echo "::error::Project directory '${{ env.PROJECT_DIR }}' not found!"
            ls -la
            exit 1
          fi
      # 2. 设置Android环境
      - uses: android-actions/setup-android@v3
        with:
          android-sdk-platform: 34
          android-sdk-build-tools: 34.0.0

      # 4. 设置Flutter环境
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      # 5. 验证环境
      - name: Verify Flutter
        run: |
          flutter --version
          flutter doctor

      # 6. 智能修复项目结构（兼容大小写）
      - name: Fix and Prepare Project
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # 1. 查找入口文件（兼容大小写）
          echo "查找入口文件..."
          ENTRY_POINT=""
          # 检查可能的入口文件路径（不区分大小写）
          for path in "example/lib/main.dart" "Example/lib/main.dart" "lib/main.dart"; do
            if [ -f "$path" ]; then
              ENTRY_POINT="$path"
              break
            fi
          done
          
          # 如果标准路径没找到，使用find命令搜索
          if [ -z "$ENTRY_POINT" ]; then
            ENTRY_POINT=$(find . -iname "main.dart" -o -iname "main_prod.dart" | head -1)
            if [ -z "$ENTRY_POINT" ]; then
              echo "::error::未找到任何Dart入口文件!"
              exit 1
            fi
          fi
          echo "找到入口文件: $ENTRY_POINT"
          echo "ENTRY_POINT=$ENTRY_POINT" >> $GITHUB_ENV

          # 2. 备份关键文件（兼容大小写）
          echo "备份关键文件..."
          mkdir -p ../temp_backup
          
          # 备份lib和pubspec.yaml
          cp -r lib pubspec.yaml ../temp_backup/
          
          # 备份assets目录（兼容大小写）
          for dir in assets Assets; do
            if [ -d "$dir" ]; then
              cp -r "$dir" ../temp_backup/
              break
            fi
          done
          
          # 备份test目录
          [ -d "test" ] && cp -r test ../temp_backup/
          
          # 3. 修复pages目录大小写问题
          echo "修复pages目录大小写问题..."
          if [ -d "example/pages" ] && [ ! -d "example/Pages" ]; then
            mv "example/pages" "example/Pages"
          elif [ -d "lib/pages" ] && [ ! -d "lib/Pages" ]; then
            mv "lib/pages" "lib/Pages"
          fi
          
          # 4. 修复导入语句中的大小写问题
          echo "修复导入语句..."
          for file in $(find . -name "*.dart"); do
            # 修复pages/Pages大小写问题
            sed -i -E "s|import ['\"][pP]ages/PrintItemsPage\.dart['\"]|import 'Pages/PrintItemsPage.dart'|g" "$file"
          done
          
          # 5. 重建项目结构
          echo "重建项目结构..."
          cd ..
          flutter create \
            --platforms android,ios \
            --project-name ${{ env.PROJECT_DIR }} \
            --org ${{ env.ORG_NAME }} \
            --overwrite \
            temp_flutter_project
          
          # 6. 恢复项目
          echo "恢复项目..."
          cp -r temp_flutter_project/. ${{ env.PROJECT_DIR }}/
          rm -rf temp_flutter_project
          
          # 7. 恢复原有代码
          cd ${{ env.PROJECT_DIR }}
          rm -rf lib test
          cp -r ../temp_backup/lib .
          [ -d "../temp_backup/test" ] && cp -r ../temp_backup/test .
          cp ../temp_backup/pubspec.yaml .
          
          # 恢复assets目录（兼容大小写）
          for dir in assets Assets; do
            if [ -d "../temp_backup/$dir" ]; then
              cp -r "../temp_backup/$dir" .
              break
            fi
          done
          
          # 8. 确保入口文件存在
          if [ ! -f "$ENTRY_POINT" ]; then
            echo "::error::入口文件 $ENTRY_POINT 不存在!"
            exit 1
          fi
          
          # 9. 清理备份
          rm -rf ../temp_backup
          echo "项目准备完成!"

      # 7. 获取依赖
      - name: Get dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter pub get

      # 8. 设置Java环境
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

    # 3. 恢复keystore文件
      - name: Setup Keystore
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # 创建目录
          mkdir -p ${{ env.KEYSTORE_PATH }}
          
          # 从环境变量解码keystore
          echo "${{ env. }}" | base64 -d > ${{ env.KEYSTORE_PATH }}/app.keystore
          
          # 验证文件
          if [ ! -f "${{ env.KEYSTORE_PATH }}/app.keystore" ]; then
            echo "::error::Keystore restoration failed!"
            exit 1
          fi
          
          # 设置权限
          chmod 600 ${{ env.KEYSTORE_PATH }}/app.keystore

     # 8. 设置签名密钥
      - name: Setup signing keys
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # 创建目录并恢复keystore
          mkdir -p ${{ env.KEYSTORE_PATH }}
          echo "${{ env. }}" | base64 -d > ${{ env.KEYSTORE_PATH }}/app.keystore
          chmod 600 ${{ env.KEYSTORE_PATH }}/app.keystore

          # 创建key.properties
          cat > android/key.properties <<EOF
          storeFile=${PWD}/${{ env.KEYSTORE_PATH }}/app.keystore
          storePassword=${{ env.KEYSTORE_PASSWORD }}
          keyAlias=${{ env.KEY_ALIAS }}
          keyPassword=${{ env.KEY_PASSWORD }}
          EOF

          # 修改build.gradle
          sed -i '/android {/a \
          signingConfigs {\
              release {\
                  storeFile file("'"${PWD}/${{ env.KEYSTORE_PATH }}/app.keystore"'")\
                  storePassword "'"${{ env.KEYSTORE_PASSWORD }}"'"\
                  keyAlias "'"${{ env.KEY_ALIAS }}"'"\
                  keyPassword "'"${{ env.KEY_PASSWORD }}"'"\
              }\
          }\
          buildTypes {\
              release {\
                  signingConfig signingConfigs.release\
              }\
          }' android/app/build.gradle

          echo "签名配置完成"
          echo "key.properties内容:"
          cat android/key.properties

      # 10. 构建APK (使用找到的入口点)
      - name: Build APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "使用入口点: $ENTRY_POINT"
          flutter clean
          flutter build apk --release --no-tree-shake-icons -t $ENTRY_POINT


       # 10. 验证APK签名
      - name: Verify APK signature
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # 设置Android工具路径
          export PATH=$PATH:$ANDROID_HOME/build-tools/34.0.0
          
          # 验证签名
          if ! apksigner verify --print-certs build/app/outputs/flutter-apk/app-release.apk; then
            echo "::error::APK签名验证失败"
            echo "尝试使用jarsigner验证..."
            jarsigner -verify -verbose -certs build/app/outputs/flutter-apk/app-release.apk || exit 1
          fi
          echo "✅ APK签名验证通过"
          
      # 11. 提取版本信息并设置构建日期
      - name: Extract version info
        id: version
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '\"')
          APP_NAME=$(grep 'name:' pubspec.yaml | awk '{print $2}' | tr -d '\"')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT
          echo "APK_PATH=${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      # 12. 创建发布
      - name: Create Release
        id: create_release
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          name: ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
          body: |
            ## 🚀 ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
            
            **Build Information**
            - Build Date: ${{ steps.version.outputs.BUILD_DATE }}
            
            **Commit Information**
            - Commit Hash: [${{ steps.commit.outputs.commit_hash }}](${{ steps.commit.outputs.commit_url }})
            - Commit Message: ${{ steps.commit.outputs.commit_message }}
            - Commit Author: ${{ steps.commit.outputs.commit_author }}
            - Commit Date: ${{ steps.commit.outputs.commit_date }}
            
            **APK Information**
            - Version: ${{ steps.version.outputs.VERSION }}
            - Signed: ✅ Yes (with ${{ env.KEYSTORE_ALIAS }} key)
      
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            ${{ steps.version.outputs.APK_PATH }}
