name: Build and Release Flutter APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 允许 GITHUB_TOKEN 发布 release

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.0'

      - name: Disable analytics
        run: flutter config --no-analytics


         # 6. 智能修复项目结构（兼容大小写）
      - name: Fix and Prepare Project
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # 1. 查找入口文件（兼容大小写）
          echo "查找入口文件..."
          ENTRY_POINT=""
          # 检查可能的入口文件路径（不区分大小写）
          for path in "example/lib/main.dart" "Example/lib/main.dart" "lib/main.dart"; do
            if [ -f "$path" ]; then
              ENTRY_POINT="$path"
              break
            fi
          done
          
          # 如果标准路径没找到，使用find命令搜索
          if [ -z "$ENTRY_POINT" ]; then
            ENTRY_POINT=$(find . -iname "main.dart" -o -iname "main_prod.dart" | head -1)
            if [ -z "$ENTRY_POINT" ]; then
              echo "::error::未找到任何Dart入口文件!"
              exit 1
            fi
          fi
          echo "找到入口文件: $ENTRY_POINT"
          echo "ENTRY_POINT=$ENTRY_POINT" >> $GITHUB_ENV

          # 2. 备份关键文件（兼容大小写）
          echo "备份关键文件..."
          mkdir -p ../temp_backup
          
          # 备份lib和pubspec.yaml
          cp -r lib pubspec.yaml ../temp_backup/
          
          # 备份assets目录（兼容大小写）
          for dir in assets Assets; do
            if [ -d "$dir" ]; then
              cp -r "$dir" ../temp_backup/
              break
            fi
          done
          
          # 备份test目录
          [ -d "test" ] && cp -r test ../temp_backup/
          
          # 3. 修复pages目录大小写问题
          echo "修复pages目录大小写问题..."
          if [ -d "example/pages" ] && [ ! -d "example/Pages" ]; then
            mv "example/pages" "example/Pages"
          elif [ -d "lib/pages" ] && [ ! -d "lib/Pages" ]; then
            mv "lib/pages" "lib/Pages"
          fi
          
          # 4. 修复导入语句中的大小写问题
          echo "修复导入语句..."
          for file in $(find . -name "*.dart"); do
            # 修复pages/Pages大小写问题
            sed -i -E "s|import ['\"][pP]ages/PrintItemsPage\.dart['\"]|import 'Pages/PrintItemsPage.dart'|g" "$file"
          done
          
          # 5. 重建项目结构
          echo "重建项目结构..."
          cd ..
          flutter create \
            --platforms android,ios \
            --project-name ${{ env.PROJECT_DIR }} \
            --org ${{ env.ORG_NAME }} \
            --overwrite \
            temp_flutter_project
          
          # 6. 恢复项目
          echo "恢复项目..."
          cp -r temp_flutter_project/. ${{ env.PROJECT_DIR }}/
          rm -rf temp_flutter_project
          
          # 7. 恢复原有代码
          cd ${{ env.PROJECT_DIR }}
          rm -rf lib test
          cp -r ../temp_backup/lib .
          [ -d "../temp_backup/test" ] && cp -r ../temp_backup/test .
          cp ../temp_backup/pubspec.yaml .
          
          # 恢复assets目录（兼容大小写）
          for dir in assets Assets; do
            if [ -d "../temp_backup/$dir" ]; then
              cp -r "../temp_backup/$dir" .
              break
            fi
          done
          
          # 8. 确保入口文件存在
          if [ ! -f "$ENTRY_POINT" ]; then
            echo "::error::入口文件 $ENTRY_POINT 不存在!"
            exit 1
          fi
          
          # 9. 清理备份
          rm -rf ../temp_backup
          echo "项目准备完成!"

      # 解码 keystore
      - name: Decode keystore from secret
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > flutter_printer_qpos/example/android/app/app.keystore

      # 创建 key.properties 文件
      - name: Create key.properties
        run: |
          cat > flutter_printer_qpos/example/android/key.properties <<EOF
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=app.keystore
          EOF

      # 安装依赖
      - name: Install dependencies
        run: flutter pub get
        working-directory: flutter_printer_qpos/example

      # 分析插件本体
      - name: Analyze (non-fatal)
        run: flutter analyze || true
        working-directory: flutter_printer_qpos

      # 构建 APK（已签名）
      - name: Build signed APK
        run: flutter build apk --release
        working-directory: flutter_printer_qpos/example

      # 自动生成 TAG（递增规则 0.0.1 -> 0.0.2 ... -> 0.1.0）
      - name: Determine next tag
        id: tag
        run: |
         # 获取远程 tag 列表
          git fetch --tags
          latest_tag=$(git tag | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
          if [[ -z "$latest_tag" ]]; then
            next_tag="1.0.0"
          else
            IFS='.' read -r major minor patch <<<"${latest_tag}"
            if [[ $patch -lt 9 ]]; then
              patch=$((patch+1))
            else
              patch=0
              minor=$((minor+1))
            fi
            next_tag="${major}.${minor}.${patch}"
          fi
          echo "Next tag: $next_tag"
          echo "tag=$next_tag" >> $GITHUB_OUTPUT

      # 创建 Git Tag（必要）
      - name: Create Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.tag.outputs.tag }}
          git push origin ${{ steps.tag.outputs.tag }}

      # 创建 GitHub Release 并上传 APK
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          files: flutter_printer_qpos/example/build/app/outputs/flutter-apk/app-release.apk
        env:
          GITHUB_TOKEN: ${{ github.token }}
