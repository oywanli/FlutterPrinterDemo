name: Flutter CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  FLUTTER_VERSION: "3.19.5"
  PROJECT_DIR: "flutter_printer_qpos"
  ORG_NAME: "com.dspread"
  KEYSTORE_FILE: "./example/android/app/app.keystore"  # Your keystore file name
  KEYSTORE_ALIAS: "gundam_wing"      # Your keystore alias

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Get commit details
      - name: Get commit details
        id: commit
        run: |
          echo "commit_hash=$(git log -1 --pretty=%H)" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=%s)" >> $GITHUB_OUTPUT
          echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
          echo "commit_date=$(git log -1 --pretty=%cd --date=format:'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          echo "commit_url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$GITHUB_SHA" >> $GITHUB_OUTPUT

      # 3. Set up Java environment
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # 4. Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      # 5. Verify environment
      - name: Verify Flutter
        run: |
          flutter --version
          flutter doctor

      # 6. Get dependencies
      - name: Get dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: flutter pub get

      # 7. Configure signing (using GitHub secrets)
      - name: Configure signing
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # Create key.properties file
          cat <<EOF > android/key.properties
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ env.KEYSTORE_ALIAS }}
          storeFile=../${{ env.KEYSTORE_FILE }}
          EOF

          # Create local.properties file
          cat <<EOF > android/local.properties
          flutter.sdk=$FLUTTER_HOME
          flutter.versionName=${{ steps.version.outputs.VERSION }}
          flutter.versionCode=${{ steps.version.outputs.VERSION_CODE }}
          EOF

      # 8. Build signed APK
      - name: Build signed APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # Copy keystore file from secrets
          echo "${{ secrets.ANDROID_KEYSTORE }}" > ${{ env.KEYSTORE_FILE }}
          base64 --decode ${{ env.KEYSTORE_FILE }} > ${{ env.KEYSTORE_FILE }}

          flutter clean
          flutter build apk --release --no-tree-shake-icons \
            --build-name=${{ steps.version.outputs.VERSION }} \
            --build-number=${{ steps.version.outputs.VERSION_CODE }}

          # Verify APK is signed
          apksigner verify build/app/outputs/flutter-apk/app-release.apk

      # 9. Extract version info
      - name: Extract version info
        id: version
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '\"')
          VERSION_CODE=$(git rev-list --count HEAD)
          APP_NAME=$(grep 'name:' pubspec.yaml | awk '{print $2}' | tr -d '\"')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT
          echo "APK_PATH=${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      # 10. Create release
      - name: Create Release
        id: create_release
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          name: ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
          body: |
            ## ðŸš€ ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
            
            **Build Information**
            - Build time: ${{ steps.version.outputs.BUILD_DATE }}
            - Version code: ${{ steps.version.outputs.VERSION_CODE }}
            - Triggered by: ${{ github.event_name }} (${{ github.ref }})
            
            **Latest Commit**
            - Commit hash: [${{ steps.commit.outputs.commit_hash }}](${{ steps.commit.outputs.commit_url }})
            - Commit message: ${{ steps.commit.outputs.commit_message }}
            - Author: ${{ steps.commit.outputs.commit_author }}
            - Commit date: ${{ steps.commit.outputs.commit_date }}
            
            **APK Information**
            - Version: ${{ steps.version.outputs.VERSION }}
            - Signed: Yes (SHA-256)
            
            **Workflow Information**
            - Workflow run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            ${{ steps.version.outputs.APK_PATH }}
