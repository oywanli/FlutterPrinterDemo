name: Flutter CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  FLUTTER_VERSION: "3.19.5"
  PROJECT_DIR: "flutter_printer_qpos"
  ORG_NAME: "com.dspread"

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码（获取完整提交历史）
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整提交历史，以便获取提交信息

      # 2. 获取提交信息
      - name: Get commit details
        id: commit
        run: |
          echo "commit_hash=$(git log -1 --pretty=%H)" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=%s)" >> $GITHUB_OUTPUT
          echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
          echo "commit_date=$(git log -1 --pretty=%cd --date=format:'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          echo "commit_url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$GITHUB_SHA" >> $GITHUB_OUTPUT

      # 3. 验证项目目录
      - name: Verify project directory
        run: |
          if [ ! -d "${{ env.PROJECT_DIR }}" ]; then
            echo "::error::Project directory '${{ env.PROJECT_DIR }}' not found!"
            ls -la
            exit 1
          fi

      # 4. 设置Flutter环境
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      # 5. 验证环境
      - name: Verify Flutter
        run: |
          flutter --version
          flutter doctor

      # 6. 智能修复项目结构（兼容大小写）
      - name: Fix and Prepare Project
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # 1. 查找入口文件（兼容大小写）
          echo "查找入口文件..."
          ENTRY_POINT=""
          # 检查可能的入口文件路径（不区分大小写）
          for path in "example/lib/main.dart" "Example/lib/main.dart" "lib/main.dart"; do
            if [ -f "$path" ]; then
              ENTRY_POINT="$path"
              break
            fi
          done
          # 如果标准路径没找到，使用find命令搜索
          if [ -z "$ENTRY_POINT" ]; then
            ENTRY_POINT=$(find . -iname "main.dart" -o -iname "main_prod.dart" | head -1)
            if [ -z "$ENTRY_POINT" ]; then
              echo "::error::未找到任何Dart入口文件!"
              exit 1
            fi
          fi
          echo "找到入口文件: $ENTRY_POINT"
          echo "ENTRY_POINT=$ENTRY_POINT" >> $GITHUB_ENV

          # 2. 备份关键文件（兼容大小写）
          echo "备份关键文件..."
          mkdir -p ../temp_backup
          
          # 备份lib和pubspec.yaml
          cp -r lib pubspec.yaml ../temp_backup/
          
          # 备份assets目录（兼容大小写）
          for dir in assets Assets; do
            if [ -d "$dir" ]; then
              cp -r "$dir" ../temp_backup/
              break
            fi
          done
          
          # 备份test目录
          [ -d "test" ] && cp -r test ../temp_backup/
          
          # 3. 修复pages目录大小写问题
          echo "修复pages目录大小写问题..."
          if [ -d "example/pages" ] && [ ! -d "example/Pages" ]; then
            mv "example/pages" "example/Pages"
          elif [ -d "lib/pages" ] && [ ! -d "lib/Pages" ]; then
            mv "lib/pages" "lib/Pages"
          fi
          
          # 4. 修复导入语句中的大小写问题
          echo "修复导入语句..."
          for file in $(find . -name "*.dart"); do
            # 修复pages/Pages大小写问题
            sed -i -E "s|import ['\"][pP]ages/PrintItemsPage\.dart['\"]|import 'Pages/PrintItemsPage.dart'|g" "$file"
          done
          
          # 5. 重建项目结构
          echo "重建项目结构..."
          cd ..
          flutter create \
            --platforms android,ios \
            --project-name ${{ env.PROJECT_DIR }} \
            --org ${{ env.ORG_NAME }} \
            --overwrite \
            temp_flutter_project
          
          # 6. 恢复项目
          echo "恢复项目..."
          cp -r temp_flutter_project/. ${{ env.PROJECT_DIR }}/
          rm -rf temp_flutter_project
          
          # 7. 恢复原有代码
          cd ${{ env.PROJECT_DIR }}
          rm -rf lib test
          cp -r ../temp_backup/lib .
          [ -d "../temp_backup/test" ] && cp -r ../temp_backup/test .
          cp ../temp_backup/pubspec.yaml .
          
          # 恢复assets目录（兼容大小写）
          for dir in assets Assets; do
            if [ -d "../temp_backup/$dir" ]; then
              cp -r "../temp_backup/$dir" .
              break
            fi
          done
          
          # 8. 确保入口文件存在
          if [ ! -f "$ENTRY_POINT" ]; then
            echo "::error::入口文件 $ENTRY_POINT 不存在!"
            exit 1
          fi
          
          # 9. 清理备份
          rm -rf ../temp_backup
          echo "项目准备完成!"

      # 7. 获取依赖
      - name: Get dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter pub get

      # 8. 设置Java环境
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          build-tools-version: "34.0.0"  # 明确指定版本
          cmake-version: "3.22.1" 

     # 解码 keystore
      - name: Decode keystore from secret
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > flutter_printer_qpos/example/android/app/app.keystore

# 创建 key.properties 文件
      - name: Create key.properties
        run: |
          cat > flutter_printer_qpos/example/android/app/key.properties <<EOF
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=app.keystore
          EOF

# 验证文件是否创建成功
      - name: Verify keystore and properties
        run: |
          ls -la flutter_printer_qpos/example/android/app/app.keystore
          cat flutter_printer_qpos/example/android/app/key.properties

# 构建APK
      - name: Build APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
         echo "使用入口点: $ENTRY_POINT"
         flutter clean
         flutter build apk --release --no-tree-shake-icons -t $ENTRY_POINT

 # # 9. 签名APK
 #      - name: Sign APK
 #        working-directory: ${{ env.PROJECT_DIR }}
 #        run: |
 #          # 定义路径
 #          UNSIGNED_APK="build/app/outputs/flutter-apk/app-release.apk"
 #          SIGNED_APK="build/app/outputs/flutter-apk/app-release-signed.apk"
          
 #          # 验证原始APK存在
 #          if [ ! -f "$UNSIGNED_APK" ]; then
 #            echo "::error::未找到APK文件 $UNSIGNED_APK"
 #            ls -la build/app/outputs/flutter-apk/
 #            exit 1
 #          fi

 #          # 签名APK
 #          jarsigner \
 #            -verbose \
 #            -sigalg SHA256withRSA \
 #            -digestalg SHA-256 \
 #            -keystore example/android/app/app.keystore \
 #            -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
 #            -keypass "${{ secrets.KEY_PASSWORD }}" \
 #            -signedjar "$SIGNED_APK" \
 #            "$UNSIGNED_APK" \
 #            "${{ secrets.KEY_ALIAS }}"



      - name: Sign APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # 定义路径
          UNSIGNED_APK="build/app/outputs/flutter-apk/app-release.apk"
          SIGNED_APK="build/app/outputs/flutter-apk/app-release-signed.apk"
          export ANDROID_HOME=$HOME/Android/Sdk
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/build-tools/$(ls $ANDROID_HOME/build-tools | sort -r | head -1)
    
          # 检查原始APK是否存在
          if [ ! -f "$UNSIGNED_APK" ]; then
            echo "::error::未找到APK文件 $UNSIGNED_APK"
            ls -la build/app/outputs/flutter-apk/
            exit 1
          fi

          # 1. 先使用 jarsigner 进行 v1签名（兼容旧设备）
          jarsigner \
          -verbose \
          -sigalg SHA256withRSA \
          -digestalg SHA-256 \
          -keystore example/android/app/app.keystore \
          -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
          -keypass "${{ secrets.KEY_PASSWORD }}" \
          -signedjar "$SIGNED_APK" \
          "$UNSIGNED_APK" \
          "${{ secrets.KEY_ALIAS }}"

          # 2. 再使用 apksigner 进行 v2/v3签名（推荐）
          $ANDROID_HOME/build-tools/*/apksigner sign \
          --ks example/android/app/app.keystore \
          --ks-pass "pass:${{ secrets.KEYSTORE_PASSWORD }}" \
          --key-pass "pass:${{ secrets.KEY_PASSWORD }}" \
          --ks-key-alias "${{ secrets.KEY_ALIAS }}" \
          --out "$SIGNED_APK" \
          "$SIGNED_APK"

          # 3. 验证签名
          $ANDROID_HOME/build-tools/*/apksigner verify --verbose "$SIGNED_APK"


       # 10. 提取版本信息并设置构建日期
      - name: Extract version info
        id: version
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '\"')
          APP_NAME=$(grep 'name:' pubspec.yaml | awk '{print $2}' | tr -d '\"')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT
          echo "APK_PATH=$(pwd)/build/app/outputs/flutter-apk/app-release-signed.apk" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      # 11. 创建发布
      - name: Create Release
        id: create_release
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          name: ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
          body: |
            ## 🚀 ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
            
            **Commit Messgae**
            - commit hash: [${{ steps.commit.outputs.commit_hash }}](${{ steps.commit.outputs.commit_url }})
            - commit message: ${{ steps.commit.outputs.commit_message }}
            - commit author: ${{ steps.commit.outputs.commit_author }}
            - commit date: ${{ steps.commit.outputs.commit_date }}
            
            **APK Version**
            - Version: ${{ steps.version.outputs.VERSION }}
      
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            ${{ steps.version.outputs.APK_PATH }}      


      # # 10. 提取版本信息
      # - name: Extract version info
      #   id: version
      #   working-directory: ${{ env.PROJECT_DIR }}/example
      #   run: |
      #     VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '\"')
      #     APP_NAME=$(grep 'name:' pubspec.yaml | awk '{print $2}' | tr -d '\"')
      #     echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      #     echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT
      #     echo "BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
      #     echo "APK_PATH=$(pwd)/build/app/outputs/flutter-apk/app-release-signed.apk" >> $GITHUB_OUTPUT

      # # 11. 创建Release
      # - name: Create Release
      #   id: create_release
      #   if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
      #   uses: softprops/action-gh-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: v${{ steps.version.outputs.VERSION }}
      #     name: ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
      #     body: |
      #       ## 🚀 ${{ steps.version.outputs.APP_NAME }} v${{ steps.version.outputs.VERSION }}
            
      #       **Build Information**
      #       - Version: ${{ steps.version.outputs.VERSION }}
      #       - Build Date: ${{ steps.version.outputs.BUILD_DATE }}
            
      #       **Commit Information**
      #       - Commit: [${{ steps.commit.outputs.commit_hash }}](${{ steps.commit.outputs.commit_url }})
      #       - Message: ${{ steps.commit.outputs.commit_message }}
      #       - Author: ${{ steps.commit.outputs.commit_author }}
      #       - Date: ${{ steps.commit.outputs.commit_date }}
            
      #       **Installation**
      #       Download the signed APK below and install on your Android device.
      #     draft: false
      #     prerelease: false
      #     files: |
      #       ${{ steps.version.outputs.APK_PATH }}














         

  
      # # 使用 jarsigner 手动签名 APK
      # - name: Sign APK with keystore
      #   run: |
      #     # 找到构建的 APK 文件（通常位于 build/app/outputs/flutter-apk/）
      #     APK_PATH=${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk  # 根据实际情况调整
      #     SIGNED_APK="app-signed.apk"

      #     # 使用 jarsigner 签名
      #     jarsigner \
      #       -verbose \
      #       -sigalg SHA256withRSA \
      #       -digestalg SHA-256 \
      #       -keystore flutter_printer_qpos/example/android/app/app.keystore \
      #       -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
      #       -keypass "${{ secrets.KEY_PASSWORD }}" \
      #       -signedjar $SIGNED_APK \
      #       $APK_PATH \
      #       "${{ secrets.KEY_ALIAS }}"

            

     
